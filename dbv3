package projekt.zaliczenie.application.database;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.jdbc.core.BeanPropertyRowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import projekt.zaliczenie.application.views.chat.Mainscreen;

import javax.sql.DataSource;
import java.util.List;
public class Database {
    @Autowired
    private JdbcTemplate jdbcTemplate = new JdbcTemplate(mysqlDarasource());
    @Bean
    public DataSource mysqlDarasource() {
        DriverManagerDataSource dataSource = new DriverManagerDataSource();
        dataSource.setDriverClassName("com.mysql.cj.jdbc.Driver");
        dataSource.setUrl("jdbc:mysql://wsb-zaliczenie-springapp-db.mysql.database.azure.com:3306/wab-zaliczenie-springapp-datab?useSSL=true");
        dataSource.setUsername("MainLogindb");
        dataSource.setPassword("HardPassword1");
        return dataSource;
    }
    public List<User> getAllUsers() {
        return jdbcTemplate.query("SELECT * FROM users",
                BeanPropertyRowMapper.newInstance(User.class));
    }
    public List<Messages> getAllMessages() {
        return jdbcTemplate.query("SELECT * FROM messages",
                BeanPropertyRowMapper.newInstance(Messages.class));
    }
    public List<Refreshes> getAllRefresh() {
        return jdbcTemplate.query("SELECT * FROM refreshes",
                BeanPropertyRowMapper.newInstance(Refreshes.class));
    }

    public List<Messages> getConversation(int user1, int user2)
    {
        return jdbcTemplate.query("SELECT * FROM messages WHERE (id_sender = '"+user1+"' AND id_reciver = '"+user2+"') OR (id_sender = '"+user2+"' AND id_reciver = '"+user1+"')",
                BeanPropertyRowMapper.newInstance(Messages.class));
    }

    public List<Messages> getConversationUpdate(int user1, int user2, int id)
    {
        return jdbcTemplate.query("SELECT * FROM messages WHERE ((id_sender = '"+user1+"' AND id_reciver = '"+user2+"') OR (id_sender = '"+user2+"' AND id_reciver = '"+user1+"')) AND id_message > '"+id+"'",
                BeanPropertyRowMapper.newInstance(Messages.class));
    }
    public boolean register(String login, String password) {
        if (login != null && password != null) {
            jdbcTemplate.update("INSERT INTO users (login, password) VALUES('" + login + "','" + password + "')");
            return true;
        }
        return false;
    }

    public boolean sendMessage(int idSender, int idReciver, String message) {
          jdbcTemplate.execute("INSERT INTO  messages (id_sender, id_reciver, message) VALUES ('" + idSender + "','" + idReciver + "','" + message +"' )");
          return true;
    }
    
    public boolean addToRefresh(int id, int refresh, int conversation) {
          jdbcTemplate.update("INSERT INTO refreshes (id_user, refresh, conversation) VALUES('" + id + "','" + refresh + "','"+conversation+"')");
          return true;
    }   

    public boolean changeRefresh (int id) {
        jdbcTemplate.update("UPDATE refreshes set refresh = 1 where id_user = '" + id + "'");
        return true;
    }
    
    public boolean newUserAddRefresh(int id, int refresh){
    	for (int i=1;i<=id;i++){
    		addToRefresh(id,0,i);
    	}
    	for(int i=1;i<id;i++){
    		addToRefresh(i,0,id);
    	}
    	return true;
    }
    
    public boolean checkRefresh (int logedid, int conversation){
        List<Refreshes> refreshes = jdbcTemplate.query("SELECT  * FROM refreshes WHERE id_user ='" + logedid +"' AND conversation ='"+conversation+"'", BeanPropertyRowMapper.newInstance(Refreshes.class));
        if (refreshes.get(logedid).getRefresh() == 1) {
            jdbcTemplate.update("UPDATE refreshes set refresh = 0 where id_user = '" + logedid + "'");
            return true;
        }
        return false;
    }
